{"name":"Reasy","tagline":"基于FIS3构建的纯前端自动化工具","body":"# reasy  \r\n[![NPM version](https://badge.fury.io/js/reasy.png)](https://www.npmjs.org/package/reasy)\r\n[![Build Status](https://api.travis-ci.org/wEasyTeam/reasy.png?branch=master)](https://travis-ci.org/wEasyTeam/reasy)\r\n\r\n[![NPM Download](https://nodei.co/npm-dl/reasy.png?months=1)](https://www.npmjs.org/package/reasy)\r\n\r\n> 基于fis3的纯前端工程自动化工具\r\n\r\n\r\n\r\n## 安装\r\n\r\n 1. Linux\r\n\r\n        $npm install -g reasy\r\n        $npm install -g web-debug\r\n        \r\n        ;or use git\r\n        $git clone https://github.com/wEasyTeam/reasy\r\n        $cd reasy\r\n        $./reasy-install.sh\r\n  \r\n 2. Windows\r\n     \r\n        >npm install -g reasy\r\n        >npm install -g web-debug\r\n        \r\n        ;or use git\r\n        >git clone https://github.com/wEasyTeam/reasy\r\n        >cd reasy\r\n        >reasy-install.bat\r\n\r\n > 如`npm`方式安装失败，可以下载安装脚本进行安装：[[Linux安装脚本](https://raw.githubusercontent.com/wEasyTeam/reasy/master/reasy-install.sh)]   [[Windows安装脚本](https://raw.githubusercontent.com/wEasyTeam/reasy/master/reasy-install.bat)]    [[WindowsXP安装脚本](https://raw.githubusercontent.com/wEasyTeam/reasy/master/reasy-install-xp.bat)]\r\n\r\n## 用法\r\n\r\n> 详见： [FIS3官网](http://fis.baidu.com/)\r\n\r\n> 注：建议将默认配置文件命名为`reasy-conf.js`，与fis3的配置文件`fis-conf.js`区分开来。\r\n\r\n\r\n## DEMO\r\n> https://github.com/wEasyTeam/reasy/tree/master/example\r\n\r\n## 新增功能使用说明\r\n\r\n### 新增API\r\n\r\n 为了确保一致性，reasy对FSI3的API进行了增量拓展。\r\n\r\n * reasy.extend(ruleName)\r\n   该方法可以实现对配置的继承，可继承的配置在reasy的rules目录下，你也可以在项目rules目录下添加自己的可复用规则，采用`module.exports`导出\r\n * ...\r\n \r\n\r\n#### 内置规则\r\n\r\n现有的内置规则有: \r\n\r\n* relative 将绝对路径转化为相对路径\r\n* autoprefix  可以实现css自动添加私有前缀\r\n* compress 对css,js,png进行压缩\r\n* parse 对sass,less,art-template进行编译\r\n* sprite 对sass,less,css添加雪碧图\r\n* md5 将文件名修改为md5形式\r\n* sea 对sea.js模块进行封装\r\n* mod 对modj.s模块进行封装\r\n* require 对require.js模块进行封装\r\n* lint 对js进行lint\r\n* qunit 进行qunit单元测试\r\n* debug 去除压缩属性\r\n\r\n你也可以自己编写规则放置在工程目录下的rules目录下，如：`workdir/myconf.js`,则调用方法为：`reasy.extend('myconf', [args])`。\r\nrule文件书写示例：\r\n```\r\nmodule.exports = function(args) {\r\n    return this.match('**', {\r\n        // ...  写法请参考FIS3配置文件写法\r\n    });\r\n};\r\n```\r\n\r\n\r\n### 新增命令\r\n\r\n 为了减少不必要的配置文件的书写，本工具在`release`命令上拓展了一个`-R`(或`--rules`)命令，使用方法示例: `reasy release -R parse,compress,md5 -d ../output` 。表示编译时会将parse, compress, 和 md5规则应用上去，而不需要编写`reasy-conf.js`\r\n\r\n\r\n### 调试服务器\r\nreasy没有使用FIS3内置的`fis server`做为web服务器，原因主要有：\r\n\r\n* `fis3 release -L` 命令会将liveload.js加入页面，开发阶段可能会打调试版的代码部署至服务器，导致liveload.js无法被用户加载而出错。`web-debug`是在做为本地服务器动态解析时自动加入liveload.js,并不修改本地代码。\r\n* `web-debug`集成了对移动端的调试功能，可以更方便地进行移动页面开发\r\n\r\n> 使用时在工程目录执行`web-debug 8080 ./dist`即可。\r\n  \r\n\r\n\r\n## 关于reasy\r\n\r\n> reasy前端自动化工具基于FIS3构建，并在其基础上对纯前端开发模式进行了一定的优化，使用更为轻便。主要特点有：\r\n\r\n 1. 对前端默认的编译插件集进行了打包，实现一键安装即可使用\r\n 2. 实现配置继承，并对常用的功能（如压缩，md5，sass编译，模版编译等）进行了封装，可以在一定程度上减少配置文件的书写量\r\n 3. 增加了`-m`配置实现无配置实现基础的压缩，md5等功能\r\n 4. 更改FIS3内置Server为[`web-debug`](https://github.com/lwdgit/web-debug/),增加了移动端调试功能\r\n 5. 更多功能正在进一步添加...\r\n\r\n    \r\n    ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}